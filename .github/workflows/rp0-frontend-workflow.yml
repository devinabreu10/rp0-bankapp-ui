name: RP0 Banking Frontend CI/CD

# Controls when the workflow will run
on:
  push:
    branches: [ main ]
#  pull_request:
#    branches: [ main ]

jobs:
  build-rp0-bankapp-frontend:
    name: Build RP0 Bank Frontend
    runs-on: ubuntu-latest # Specifies that this job runs on the latest Ubuntu runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Test and generate code coverage
        run: npm run coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 1

      - name: Build Angular app
        run: npm run build

      - name: Extract version from package.json
        id: package-version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/rp0-bankapp-ui:latest
            ${{ secrets.DOCKER_USERNAME }}/rp0-bankapp-ui:${{ steps.package-version.outputs.VERSION }}
  #      - name: Build Docker image
  #        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest .
  #      - name: Push Docker image
  #        run: docker push ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest

  sonar-qube-scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: build-rp0-bankapp-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: coverage/

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.typescript.lcov.reportPaths=coverage/report/lcov.info
            -Dsonar.exclusions=**/*.spec.ts,**/node_modules/**,*conf*.js
            -Dsonar.test.inclusions=**/*.spec.ts

  snyk-vulnerability-scan:
    name: Snyk Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-rp0-bankapp-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor

  deploy-to-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: snyk-vulnerability-scan
    steps:
      - name: Trigger Render Deploy
        run: |
          response=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            "${{ secrets.RENDER_DEPLOY_HOOK }}")
          status_code=$(echo "$response" | tail -n 1)
          if [ "$status_code" -ge 400 ]; then
            echo "Deploy failed with status: $status_code"
            echo "Response: $(echo "$response" | head -n -1)"
            exit 1
          fi

#  deploy:
#    runs-on: ubuntu-latest
#    needs: dockerize
#    steps:
#      - name: SSH Deploy
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.SSH_HOST }}
#          username: ${{ secrets.SSH_USER }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          script: |
#            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest
#            docker pull ${{ secrets.DOCKER_USERNAME }}/backend-app:latest
#            docker-compose up -d
